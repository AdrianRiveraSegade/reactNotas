{"ast":null,"code":"var _jsxFileName = \"/home/hack/a/proyecto3/notas/src/components/LoginForm.js\",\n  _s = $RefreshSig$();\nimport \"./Form.css\";\nimport { useState } from \"react\";\nimport { useTokenContext } from \"../context/TokenContext\";\nimport { Navigate, useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginForm = () => {\n  _s();\n  //Usamos useNav para redirigir al usuario segun necesitemos\n  const navigate = useNavigate();\n\n  //Llamamos la funcion setToken para poder modificar el estado del token cuando hagamos login\n  const {\n    token,\n    login\n  } = useTokenContext();\n\n  //Estados para controlar los input del formulario\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  // Si estamos logeados redirigimos a inicio.\n  if (token) return /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 21\n  }, this);\n\n  // Funcion que maneja el evento submit del formulario.\n  const handleLogin = async event => {\n    try {\n      // Cambiamos loading a true para sehabilitar el botn del formulario.\n      setLoading(true);\n\n      //Cancelamos el default del formulario\n      event.preventDefault();\n\n      //Hacemos una peticion POST a la API  enviamos en body un JSON con los datos para el login\n      const res = await fetch(\"http://localhost:4000/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n\n      //Accedemos al body\n      const body = await res.json();\n\n      //Si la respuesta viene mal lanzamos un error\n      if (!res.ok) {\n        alert(body.message);\n      } else {\n        //Cambiamos el estado y metemos el token recogido en la API\n        login(body.data);\n\n        //Redireccionamos al usuario al inicio\n        navigate(\"/\");\n      }\n    } catch (error) {\n      console.error(error);\n    } finally {\n      // Cambiamos el valor de loading a false para volver a habilitar el botn del formulario.\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"loginForm\",\n    onSubmit: handleLogin,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"email\",\n        id: \"email\",\n        type: \"email\",\n        value: email,\n        onChange: event => {\n          setEmail(event.target.value);\n        },\n        placeholder: \"mail@gmail.com\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"password\",\n        children: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"password\",\n        id: \"password\",\n        type: \"password\",\n        value: password,\n        onChange: event => {\n          setPassword(event.target.value);\n        },\n        placeholder: \"******\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"loginButton\",\n      disabled: loading,\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginForm, \"P2DWde2m5gn+qWsjcTYDt2Sluus=\", false, function () {\n  return [useNavigate, useTokenContext];\n});\n_c = LoginForm;\nexport default LoginForm;\nvar _c;\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"names":["useState","useTokenContext","Navigate","useNavigate","LoginForm","navigate","token","login","email","setEmail","password","setPassword","loading","setLoading","handleLogin","event","preventDefault","res","fetch","method","headers","body","JSON","stringify","json","ok","alert","message","data","error","console","target","value"],"sources":["/home/hack/a/proyecto3/notas/src/components/LoginForm.js"],"sourcesContent":["import \"./Form.css\";\nimport { useState } from \"react\";\nimport { useTokenContext } from \"../context/TokenContext\";\nimport { Navigate, useNavigate } from \"react-router-dom\";\n\nconst LoginForm = () => {\n  //Usamos useNav para redirigir al usuario segun necesitemos\n  const navigate = useNavigate();\n\n  //Llamamos la funcion setToken para poder modificar el estado del token cuando hagamos login\n  const { token, login } = useTokenContext();\n\n  //Estados para controlar los input del formulario\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  // Si estamos logeados redirigimos a inicio.\n  if (token) return <Navigate to=\"/\" />;\n\n  // Funcion que maneja el evento submit del formulario.\n  const handleLogin = async (event) => {\n    try {\n      // Cambiamos loading a true para sehabilitar el botn del formulario.\n      setLoading(true);\n\n      //Cancelamos el default del formulario\n      event.preventDefault();\n\n      //Hacemos una peticion POST a la API  enviamos en body un JSON con los datos para el login\n      const res = await fetch(\"http://localhost:4000/login\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ email, password }),\n      });\n\n      //Accedemos al body\n      const body = await res.json();\n\n      //Si la respuesta viene mal lanzamos un error\n      if (!res.ok) {\n        alert(body.message);\n      } else {\n        //Cambiamos el estado y metemos el token recogido en la API\n        login(body.data);\n\n        //Redireccionamos al usuario al inicio\n        navigate(\"/\");\n      }\n    } catch (error) {\n      console.error(error);\n    } finally {\n      // Cambiamos el valor de loading a false para volver a habilitar el botn del formulario.\n      setLoading(false);\n    }\n  };\n\n  return (\n    <form className=\"loginForm\" onSubmit={handleLogin}>\n      <div>\n        <label htmlFor=\"email\">Email</label>\n        <input\n          className=\"email\"\n          id=\"email\"\n          type=\"email\"\n          value={email}\n          onChange={(event) => {\n            setEmail(event.target.value);\n          }}\n          placeholder=\"mail@gmail.com\"\n        />\n      </div>\n      <div>\n        <label htmlFor=\"password\">Password</label>\n        <input\n          className=\"password\"\n          id=\"password\"\n          type=\"password\"\n          value={password}\n          onChange={(event) => {\n            setPassword(event.target.value);\n          }}\n          placeholder=\"******\"\n        />\n      </div>\n\n      <button className=\"loginButton\" disabled={loading}>\n        Login\n      </button>\n    </form>\n  );\n};\n\nexport default LoginForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}