{"ast":null,"code":"var _jsxFileName = \"/home/hack/a/proyecto3/notas/src/components/LoginForm.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { useTokenContext } from \"../context/TokenContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginForm = () => {\n  _s();\n  //Estados para controlar los input del formulario\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  //Llamamos la funcion setToken para poder modificar el estado del token cuando hagamos login\n  const {\n    setToken\n  } = useTokenContext();\n\n  //Usamos useNav para redirigir al usuario segun necesitemos\n  const navigate = useNavigate();\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"loginForm\",\n    onSubmit: async event => {\n      try {\n        //Cancelamos el default del formulario\n        event.preventDefault();\n\n        //Hacemos una peticion POST a la API  enviamos en body un JSON con los datos para el login\n        const res = await fetch(\"http:localhost:4000/login\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/son\"\n          },\n          body: JSON.stringify({\n            email,\n            password\n          })\n        });\n\n        //Accedemos al body\n        const body = await res.json();\n\n        //Si la respuesta viene mal lanzamos un error\n        if (!res.ok) {\n          throw new Error(body.message);\n        }\n\n        //Cambiamos el estado y metemos el token recogido en la API\n        setToken(body.data.token);\n\n        //Redireccionamos al usuario al inicio\n        navigate(\"/\");\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"email\",\n      children: \"Email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"email\",\n      type: \"email\",\n      value: email,\n      onChange: event => {\n        setEmail(event.target.value);\n      },\n      placeholder: \"mail@gmail.com\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"password\",\n      children: \"Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"password\",\n      type: \"password\",\n      value: password,\n      onChange: event => {\n        setPassword(event.target.value);\n      },\n      placeholder: \"******\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginForm, \"IQK99wWy6rSqP34cvAh6T7doZKY=\", false, function () {\n  return [useTokenContext, useNavigate];\n});\n_c = LoginForm;\nexport default LoginForm;\nvar _c;\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"names":["useState","useTokenContext","useNavigate","LoginForm","email","setEmail","password","setPassword","setToken","navigate","event","preventDefault","res","fetch","method","headers","body","JSON","stringify","json","ok","Error","message","data","token","error","console","target","value"],"sources":["/home/hack/a/proyecto3/notas/src/components/LoginForm.js"],"sourcesContent":["import { useState } from \"react\";\nimport { useTokenContext } from \"../context/TokenContext\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst LoginForm = () => {\n  //Estados para controlar los input del formulario\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  //Llamamos la funcion setToken para poder modificar el estado del token cuando hagamos login\n  const { setToken } = useTokenContext();\n\n  //Usamos useNav para redirigir al usuario segun necesitemos\n  const navigate = useNavigate();\n\n  return (\n    <form\n      className=\"loginForm\"\n      onSubmit={async (event) => {\n        try {\n          //Cancelamos el default del formulario\n          event.preventDefault();\n\n          //Hacemos una peticion POST a la API  enviamos en body un JSON con los datos para el login\n          const res = await fetch(\"http:localhost:4000/login\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/son\" },\n            body: JSON.stringify({ email, password }),\n          });\n\n          //Accedemos al body\n          const body = await res.json();\n\n          //Si la respuesta viene mal lanzamos un error\n          if (!res.ok) {\n            throw new Error(body.message);\n          }\n\n          //Cambiamos el estado y metemos el token recogido en la API\n          setToken(body.data.token);\n\n          //Redireccionamos al usuario al inicio\n          navigate(\"/\");\n        } catch (error) {\n          console.error(error);\n        }\n      }}\n    >\n      <label htmlFor=\"email\">Email</label>\n      <input\n        id=\"email\"\n        type=\"email\"\n        value={email}\n        onChange={(event) => {\n          setEmail(event.target.value);\n        }}\n        placeholder=\"mail@gmail.com\"\n      />\n      <label htmlFor=\"password\">Password</label>\n      <input\n        id=\"password\"\n        type=\"password\"\n        value={password}\n        onChange={(event) => {\n          setPassword(event.target.value);\n        }}\n        placeholder=\"******\"\n      />\n\n      <button>Login</button>\n    </form>\n  );\n};\n\nexport default LoginForm;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,eAAe,QAAQ,yBAAyB;AACzD,SAASC,WAAW,QAAQ,kBAAkB;AAAC;AAE/C,MAAMC,SAAS,GAAG,MAAM;EAAA;EACtB;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACM,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACA,MAAM;IAAEQ;EAAS,CAAC,GAAGP,eAAe,EAAE;;EAEtC;EACA,MAAMQ,QAAQ,GAAGP,WAAW,EAAE;EAE9B,oBACE;IACE,SAAS,EAAC,WAAW;IACrB,QAAQ,EAAE,MAAOQ,KAAK,IAAK;MACzB,IAAI;QACF;QACAA,KAAK,CAACC,cAAc,EAAE;;QAEtB;QACA,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,2BAA2B,EAAE;UACnDC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YAAE,cAAc,EAAE;UAAkB,CAAC;UAC9CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEd,KAAK;YAAEE;UAAS,CAAC;QAC1C,CAAC,CAAC;;QAEF;QACA,MAAMU,IAAI,GAAG,MAAMJ,GAAG,CAACO,IAAI,EAAE;;QAE7B;QACA,IAAI,CAACP,GAAG,CAACQ,EAAE,EAAE;UACX,MAAM,IAAIC,KAAK,CAACL,IAAI,CAACM,OAAO,CAAC;QAC/B;;QAEA;QACAd,QAAQ,CAACQ,IAAI,CAACO,IAAI,CAACC,KAAK,CAAC;;QAEzB;QACAf,QAAQ,CAAC,GAAG,CAAC;MACf,CAAC,CAAC,OAAOgB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAE;IAAA,wBAEF;MAAO,OAAO,EAAC,OAAO;MAAA,UAAC;IAAK;MAAA;MAAA;MAAA;IAAA,QAAQ,eACpC;MACE,EAAE,EAAC,OAAO;MACV,IAAI,EAAC,OAAO;MACZ,KAAK,EAAErB,KAAM;MACb,QAAQ,EAAGM,KAAK,IAAK;QACnBL,QAAQ,CAACK,KAAK,CAACiB,MAAM,CAACC,KAAK,CAAC;MAC9B,CAAE;MACF,WAAW,EAAC;IAAgB;MAAA;MAAA;MAAA;IAAA,QAC5B,eACF;MAAO,OAAO,EAAC,UAAU;MAAA,UAAC;IAAQ;MAAA;MAAA;MAAA;IAAA,QAAQ,eAC1C;MACE,EAAE,EAAC,UAAU;MACb,IAAI,EAAC,UAAU;MACf,KAAK,EAAEtB,QAAS;MAChB,QAAQ,EAAGI,KAAK,IAAK;QACnBH,WAAW,CAACG,KAAK,CAACiB,MAAM,CAACC,KAAK,CAAC;MACjC,CAAE;MACF,WAAW,EAAC;IAAQ;MAAA;MAAA;MAAA;IAAA,QACpB,eAEF;MAAA,UAAQ;IAAK;MAAA;MAAA;MAAA;IAAA,QAAS;EAAA;IAAA;IAAA;IAAA;EAAA,QACjB;AAEX,CAAC;AAAC,GApEIzB,SAAS;EAAA,QAMQF,eAAe,EAGnBC,WAAW;AAAA;AAAA,KATxBC,SAAS;AAsEf,eAAeA,SAAS;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}