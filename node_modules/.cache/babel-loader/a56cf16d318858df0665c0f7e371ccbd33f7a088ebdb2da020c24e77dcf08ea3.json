{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { useTokenContext } from \"../context/TokenContext\";\nimport { useSearchParams } from \"react-router-dom\";\n\n//este hook carga las notas de la API y devuelve las notas en un objeto\nconst useNotes = () => {\n  _s();\n  const [notes, setNotes] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const {\n    token\n  } = useTokenContext();\n\n  //El effect se ejecuta tras el render\n  useEffect(() => {\n    const fetchNotes = async () => {\n      try {\n        //Al empezar el fetch pasamos loading a true\n        setLoading(true);\n\n        //Hacemos el fetch y recogemos la respuesta del servidor\n        const res = await fetch(`http://localhost:4000/note?${searchParams.toString()}`, {\n          headers: token ? {\n            Authorization: token\n          } : {}\n        });\n\n        //Obtenemos el body de la respuesta\n        const body = await res.json();\n\n        //Si la respuesta no viene bien lanzamos un error\n        if (!res.ok) {\n          throw new Error(body.message);\n        }\n\n        //Cargamos los datos de las notas en el estado notas\n        setNotes(body.data);\n      } catch (error) {\n        //Si salta algun error metemos el mensaje de errorMessage\n        setErrorMessage(error.message);\n      } finally {\n        //Al finalizar el fetch devolvemos loading a false\n        setLoading(false);\n      }\n    };\n    if (token) fetchNotes();\n  }, [token, searchParams]);\n  return {\n    notes,\n    errorMessage,\n    loading,\n    searchParams,\n    setSearchParams\n  };\n};\n_s(useNotes, \"Jq5O2AgA6AMb4xFhTFO6aldpqoc=\", false, function () {\n  return [useSearchParams, useTokenContext];\n});\nexport default useNotes;","map":{"version":3,"names":["useState","useEffect","useTokenContext","useSearchParams","useNotes","notes","setNotes","searchParams","setSearchParams","errorMessage","setErrorMessage","loading","setLoading","token","fetchNotes","res","fetch","toString","headers","Authorization","body","json","ok","Error","message","data","error"],"sources":["/home/hack/a/proyecto3/notas/src/hooks/useNotes.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useTokenContext } from \"../context/TokenContext\";\nimport { useSearchParams } from \"react-router-dom\";\n\n//este hook carga las notas de la API y devuelve las notas en un objeto\nconst useNotes = () => {\n  const [notes, setNotes] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const { token } = useTokenContext();\n\n  //El effect se ejecuta tras el render\n  useEffect(() => {\n    const fetchNotes = async () => {\n      try {\n        //Al empezar el fetch pasamos loading a true\n        setLoading(true);\n\n        //Hacemos el fetch y recogemos la respuesta del servidor\n        const res = await fetch(\n          `http://localhost:4000/note?${searchParams.toString()}`,\n          {\n            headers: token ? { Authorization: token } : {},\n          }\n        );\n\n        //Obtenemos el body de la respuesta\n        const body = await res.json();\n\n        //Si la respuesta no viene bien lanzamos un error\n        if (!res.ok) {\n          throw new Error(body.message);\n        }\n\n        //Cargamos los datos de las notas en el estado notas\n        setNotes(body.data);\n      } catch (error) {\n        //Si salta algun error metemos el mensaje de errorMessage\n        setErrorMessage(error.message);\n      } finally {\n        //Al finalizar el fetch devolvemos loading a false\n        setLoading(false);\n      }\n    };\n\n    if (token) fetchNotes();\n  }, [token, searchParams]);\n\n  return {\n    notes,\n    errorMessage,\n    loading,\n    searchParams,\n    setSearchParams,\n  };\n};\n\nexport default useNotes;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,eAAe,QAAQ,yBAAyB;AACzD,SAASC,eAAe,QAAQ,kBAAkB;;AAElD;AACA,MAAMC,QAAQ,GAAG,MAAM;EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACO,YAAY,EAAEC,eAAe,CAAC,GAAGL,eAAe,EAAE;EACzD,MAAM,CAACM,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAM;IAAEa;EAAM,CAAC,GAAGX,eAAe,EAAE;;EAEnC;EACAD,SAAS,CAAC,MAAM;IACd,MAAMa,UAAU,GAAG,YAAY;MAC7B,IAAI;QACF;QACAF,UAAU,CAAC,IAAI,CAAC;;QAEhB;QACA,MAAMG,GAAG,GAAG,MAAMC,KAAK,CACpB,8BAA6BT,YAAY,CAACU,QAAQ,EAAG,EAAC,EACvD;UACEC,OAAO,EAAEL,KAAK,GAAG;YAAEM,aAAa,EAAEN;UAAM,CAAC,GAAG,CAAC;QAC/C,CAAC,CACF;;QAED;QACA,MAAMO,IAAI,GAAG,MAAML,GAAG,CAACM,IAAI,EAAE;;QAE7B;QACA,IAAI,CAACN,GAAG,CAACO,EAAE,EAAE;UACX,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,OAAO,CAAC;QAC/B;;QAEA;QACAlB,QAAQ,CAACc,IAAI,CAACK,IAAI,CAAC;MACrB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACd;QACAhB,eAAe,CAACgB,KAAK,CAACF,OAAO,CAAC;MAChC,CAAC,SAAS;QACR;QACAZ,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAED,IAAIC,KAAK,EAAEC,UAAU,EAAE;EACzB,CAAC,EAAE,CAACD,KAAK,EAAEN,YAAY,CAAC,CAAC;EAEzB,OAAO;IACLF,KAAK;IACLI,YAAY;IACZE,OAAO;IACPJ,YAAY;IACZC;EACF,CAAC;AACH,CAAC;AAAC,GApDIJ,QAAQ;EAAA,QAE4BD,eAAe,EAIrCD,eAAe;AAAA;AAgDnC,eAAeE,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}