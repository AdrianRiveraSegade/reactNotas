{"ast":null,"code":"var _jsxFileName = \"/home/hack/a/proyecto3/notas/src/components/NewNoteForm.js\",\n  _s = $RefreshSig$();\nimport { useState, useRef } from \"react\";\nimport { useTokenContext } from \"../context/TokenContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport uploadIcon from \"../assets/img/uploadIcon.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NewNoteForm = () => {\n  _s();\n  //Estados para controlar los inputs del formulario\n  const [title, setTitle] = useState(\"\");\n  const [text, setText] = useState(\"\");\n\n  //State para almacenar un posile error  mostrarlo por pantalla\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  //Ref que vinculamos al input de ficheros\n  const imageInputRef = useRef();\n\n  //Traemos el token para usarlo en la petici贸n al crear na nota\n  const {\n    token\n  } = useTokenContext();\n\n  //Usamos useNavigate para poder redirigir al usuario\n  const navigate = useNavigate();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"newNoteForm\",\n      onSubmit: async event => {\n        try {\n          //Cancelamos el defalt del formulario\n          event.preventDefault();\n\n          //Accedemos al input de ficheros que referenciamos  traemos las imagenes subidas\n          const images = imageInputRef.current.files;\n\n          //Creamos un nuevo formData para enviar en el body\n          const formData = new formData();\n\n          //Metemos en el formData los datos introducidos por el usuario\n          formData.set(\"title\", title);\n          formData.set(\"text\", text);\n\n          //Si ha subido una imagen hacemos un bucle que la aade al formData\n          if (images.length) {\n            for (const image of images) {\n              formData.set(image.name, image);\n            }\n          }\n\n          //Hacemos una petici贸n POST a la API  mandamos el formData en el body.\n          const res = await fetch(\"http://localhost:4000/note\", {\n            method: \"POST\",\n            headers: {\n              Authorization: token\n            },\n            body: formData\n          });\n\n          //Accedemos al body de la respuesta\n          const body = await res.json();\n\n          //Si la respuesta viene mal lanzamos un error\n          if (!res.ok) {\n            throw new Error(body.message);\n          }\n\n          //Redireccionamos al usuario a la pagina principal\n          navigate(\"/\");\n        } catch (error) {\n          console.error(error);\n          setErrorMessage(error.message);\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"title\",\n        children: \"Titulo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"title\",\n        required: true,\n        value: title,\n        onChange: event => {\n          setTitle(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"text\",\n        children: \"Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"text\",\n        required: true,\n        value: text,\n        onChange: event => {\n          setText(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"images\",\n        children: [\"Sube imagenes:\", /*#__PURE__*/_jsxDEV(\"img\", {\n          src: uploadIcon,\n          alt: \"subir imagen para la nota\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        hidden: true,\n        id: \"images\",\n        type: \"file\",\n        accept: \"image/*\",\n        ref: imageInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Publicar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      msg: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true);\n};\n_s(NewNoteForm, \"OTBfJAc+L+486hN9rz0AqdoJpc4=\", false, function () {\n  return [useTokenContext, useNavigate];\n});\n_c = NewNoteForm;\nexport default NewNoteForm;\nvar _c;\n$RefreshReg$(_c, \"NewNoteForm\");","map":{"version":3,"names":["useState","useRef","useTokenContext","useNavigate","ErrorMessage","uploadIcon","NewNoteForm","title","setTitle","text","setText","errorMessage","setErrorMessage","imageInputRef","token","navigate","event","preventDefault","images","current","files","formData","set","length","image","name","res","fetch","method","headers","Authorization","body","json","ok","Error","message","error","console","target","value"],"sources":["/home/hack/a/proyecto3/notas/src/components/NewNoteForm.js"],"sourcesContent":["import { useState, useRef } from \"react\";\nimport { useTokenContext } from \"../context/TokenContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport uploadIcon from \"../assets/img/uploadIcon.png\";\n\nconst NewNoteForm = () => {\n  //Estados para controlar los inputs del formulario\n  const [title, setTitle] = useState(\"\");\n  const [text, setText] = useState(\"\");\n\n  //State para almacenar un posile error  mostrarlo por pantalla\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  //Ref que vinculamos al input de ficheros\n  const imageInputRef = useRef();\n\n  //Traemos el token para usarlo en la petici贸n al crear na nota\n  const { token } = useTokenContext();\n\n  //Usamos useNavigate para poder redirigir al usuario\n  const navigate = useNavigate();\n\n  return (\n    <>\n      <form\n        className=\"newNoteForm\"\n        onSubmit={async (event) => {\n          try {\n            //Cancelamos el defalt del formulario\n            event.preventDefault();\n\n            //Accedemos al input de ficheros que referenciamos  traemos las imagenes subidas\n            const images = imageInputRef.current.files;\n\n            //Creamos un nuevo formData para enviar en el body\n            const formData = new formData();\n\n            //Metemos en el formData los datos introducidos por el usuario\n            formData.set(\"title\", title);\n            formData.set(\"text\", text);\n\n            //Si ha subido una imagen hacemos un bucle que la aade al formData\n            if (images.length) {\n              for (const image of images) {\n                formData.set(image.name, image);\n              }\n            }\n\n            //Hacemos una petici贸n POST a la API  mandamos el formData en el body.\n            const res = await fetch(\"http://localhost:4000/note\", {\n              method: \"POST\",\n              headers: {\n                Authorization: token,\n              },\n              body: formData,\n            });\n\n            //Accedemos al body de la respuesta\n            const body = await res.json();\n\n            //Si la respuesta viene mal lanzamos un error\n            if (!res.ok) {\n              throw new Error(body.message);\n            }\n\n            //Redireccionamos al usuario a la pagina principal\n            navigate(\"/\");\n          } catch (error) {\n            console.error(error);\n            setErrorMessage(error.message);\n          }\n        }}\n      >\n        <label htmlFor=\"title\">Titulo</label>\n        <input\n          id=\"title\"\n          required\n          value={title}\n          onChange={(event) => {\n            setTitle(event.target.value);\n          }}\n        />\n\n        <label htmlFor=\"text\">Text</label>\n        <input\n          id=\"text\"\n          required\n          value={text}\n          onChange={(event) => {\n            setText(event.target.value);\n          }}\n        />\n\n        <label htmlFor=\"images\">\n          Sube imagenes:\n          <img src={uploadIcon} alt=\"subir imagen para la nota\" />\n        </label>\n        <input\n          hidden\n          id=\"images\"\n          type=\"file\"\n          accept=\"image/*\"\n          ref={imageInputRef}\n        />\n\n        <button>Publicar</button>\n      </form>\n\n      {errorMessage && <ErrorMessage msg={errorMessage} />}\n    </>\n  );\n};\n\nexport default NewNoteForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}